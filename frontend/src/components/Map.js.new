import React, { useEffect, useState } from 'react';
import { GoogleMap, LoadScript, Marker, InfoWindow } from '@react-google-maps/api';
import './Map.css';

const MapComponent = () => {
  const [currentPosition, setCurrentPosition] = useState(null);
  const [selectedPlace, setSelectedPlace] = useState(null);
  const [mapLoaded, setMapLoaded] = useState(false);
  const [ecoSwapLocations, setEcoSwapLocations] = useState([]);
  const [realRecyclePoints, setRealRecyclePoints] = useState([]);
  const [isLoadingRecyclePoints, setIsLoadingRecyclePoints] = useState(false);
  const [nearestLocation, setNearestLocation] = useState(null);
  
  // Map container style
  const mapContainerStyle = {
    width: '100%',
    height: '600px'
  };

  // Default center (will be overridden by user location if available)
  const center = {
    lat: 45.760696, 
    lng: 21.226788 // Default coordinates for Timisoara
  };
  
  // Map options
  const mapOptions = {
    disableDefaultUI: false,
    zoomControl: true,
    mapTypeControl: true,
    scaleControl: true,
    streetViewControl: true,
    rotateControl: true,
    fullscreenControl: true
  };
  
  // Calculate distance between two points using Haversine formula
  const calculateDistance = (point1, point2) => {
    const toRadian = angle => (Math.PI / 180) * angle;
    const distance = (a, b) => {
      const EARTH_RADIUS = 6371; // km
      const dLat = toRadian(b.lat - a.lat);
      const dLon = toRadian(b.lng - a.lng);
      const a1 = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(toRadian(a.lat)) * Math.cos(toRadian(b.lat)) *
                Math.sin(dLon / 2) * Math.sin(dLon / 2);
      const c = 2 * Math.atan2(Math.sqrt(a1), Math.sqrt(1 - a1));
      return EARTH_RADIUS * c;
    };
    return distance(point1, point2);
  };

  // Find the nearest recycling location
  const findNearestLocation = () => {
    if (!currentPosition) return;
    
    const allLocations = [...ecoSwapLocations, ...realRecyclePoints];
    
    if (allLocations.length === 0) return;
    
    let closest = allLocations[0];
    let closestDistance = calculateDistance(currentPosition, allLocations[0].position);
    
    allLocations.forEach(location => {
      const distance = calculateDistance(currentPosition, location.position);
      if (distance < closestDistance) {
        closest = location;
        closestDistance = distance;
      }
    });
    
    closest.distanceKm = closestDistance.toFixed(2);
    setNearestLocation(closest);
    setSelectedPlace(closest);
  };

  // Load user's current location and EcoSwap locations
  useEffect(() => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const userPosition = {
            lat: position.coords.latitude,
            lng: position.coords.longitude
          };
          setCurrentPosition(userPosition);
          
          // After getting user position, fetch real recycle points
          fetchRecyclePoints(userPosition);
        },
        (error) => {
          console.error('Error getting current position:', error);
        }
      );
    } else {
      console.error('Geolocation is not supported by this browser');
    }
    
    // EcoSwap locations - replace with actual API call in production
    setEcoSwapLocations([
      {
        id: 'ecoswap-1',
        name: 'EcoSwap Timisoara Center',
        position: { lat: 45.760696, lng: 21.226788 },
        description: 'Main EcoSwap location in Timisoara',
        type: 'ecoswap'
      },
      {
        id: 'ecoswap-2',
        name: 'EcoSwap Arad',
        position: { lat: 46.166667, lng: 21.316667 },
        description: 'Our location in Arad',
        type: 'ecoswap'
      },
      {
        id: 'ecoswap-3',
        name: 'EcoSwap Cluj',
        position: { lat: 46.770920, lng: 23.589920 },
        description: 'Our newest location in Cluj-Napoca',
        type: 'ecoswap'
      }
    ]);
  }, []);

  // Fetch real recycle points from OpenStreetMap via Overpass API
  const fetchRecyclePoints = async (position) => {
    try {
      setIsLoadingRecyclePoints(true);
      
      // Calculate the bounding box (about 5km around the user)
      const radius = 0.045; // Approximately 5km in degrees
      const bbox = {
        south: position.lat - radius,
        west: position.lng - radius,
        north: position.lat + radius,
        east: position.lng + radius
      };
      
      const overpassQuery = `
        [out:json];
        node[amenity=recycling]
          (${bbox.south},${bbox.west},${bbox.north},${bbox.east});
        out body;
      `;
      
      const overpassUrl = `https://overpass-api.de/api/interpreter?data=${encodeURIComponent(overpassQuery)}`;
      
      const response = await fetch(overpassUrl);
      const data = await response.json();
      
      if (data && data.elements && data.elements.length > 0) {
        const recyclePoints = data.elements.map((element, index) => {
          const name = element.tags && element.tags.name 
            ? element.tags.name 
            : `Recycling Point ${index + 1}`;
          
          const description = [];
          if (element.tags) {
            if (element.tags.recycling_type) description.push(`Type: ${element.tags.recycling_type}`);
            if (element.tags.operator) description.push(`Operator: ${element.tags.operator}`);
            if (element.tags.opening_hours) description.push(`Hours: ${element.tags.opening_hours}`);
            
            // Add recycling materials
            const materials = [];
            ['paper', 'glass', 'plastic', 'metal', 'clothes', 'batteries', 'electronics'].forEach(material => {
              if (element.tags[`recycling:${material}`] === 'yes') {
                materials.push(material);
              }
            });
            
            if (materials.length > 0) {
              description.push(`Materials: ${materials.join(', ')}`);
            }
          }
          
          return {
            id: `osm-${element.id}`,
            name: name,
            position: { 
              lat: element.lat, 
              lng: element.lon 
            },
            description: description.length > 0 ? description.join(' | ') : 'Recycling point',
            type: 'recycling'
          };
        });
        
        console.log(`Found ${recyclePoints.length} recycling points nearby`);
        setRealRecyclePoints(recyclePoints);
      } else {
        console.log('No recycling points found nearby');
        setRealRecyclePoints([]);
      }
    } catch (error) {
      console.error('Error fetching recycling points:', error);
      setRealRecyclePoints([]);
    } finally {
      setIsLoadingRecyclePoints(false);
    }
  };

  // When both current position and locations are loaded, find nearest location
  useEffect(() => {
    if (currentPosition && (ecoSwapLocations.length > 0 || realRecyclePoints.length > 0)) {
      findNearestLocation();
    }
  }, [currentPosition, ecoSwapLocations, realRecyclePoints]);

  const handleMarkerClick = (location) => {
    setSelectedPlace(location);
  };
  
  // Get directions to selected location
  const getDirectionsUrl = (destination) => {
    if (!currentPosition) return '#';
    return `https://www.google.com/maps/dir/?api=1&origin=${currentPosition.lat},${currentPosition.lng}&destination=${destination.lat},${destination.lng}`;
  };

  return (
    <div className="map-container">
      <h2>EcoSwap Locations</h2>
      <p>Find EcoSwap collection and exchange points near you!</p>
      
      {nearestLocation && (
        <div className="nearest-location-info">
          <h3>Nearest {nearestLocation.type === 'recycling' ? 'Recycling' : 'EcoSwap'} Point</h3>
          <p><strong>{nearestLocation.name}</strong> - {nearestLocation.distanceKm} km away</p>
          <a 
            href={getDirectionsUrl(nearestLocation.position)} 
            target="_blank" 
            rel="noopener noreferrer" 
            className="direction-button"
          >
            Get Directions
          </a>
        </div>
      )}
      
      <LoadScript
        googleMapsApiKey="AIzaSyDdWRophBdKq73p8cb7wbGoUJ9pd0StQG8"
        onLoad={() => setMapLoaded(true)}
        libraries={["places"]}
      >
        {mapLoaded ? (
          <GoogleMap
            mapContainerStyle={mapContainerStyle}
            center={currentPosition || center}
            zoom={10}
            options={mapOptions}
          >
            {/* User's current location marker */}
            {currentPosition && (
              <Marker
                position={currentPosition}
                icon={{
                  url: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'
                }}
                title="Your location"
              />
            )}
            
            {/* EcoSwap location markers */}
            {ecoSwapLocations.map((location) => (
              <Marker
                key={location.id}
                position={location.position}
                onClick={() => handleMarkerClick(location)}
                icon={nearestLocation && nearestLocation.id === location.id ? 
                  'http://maps.google.com/mapfiles/ms/icons/green-dot.png' : 
                  'http://maps.google.com/mapfiles/ms/icons/red-dot.png'
                }
              />
            ))}
            
            {/* Real recycling point markers */}
            {realRecyclePoints.map((location) => (
              <Marker
                key={location.id}
                position={location.position}
                onClick={() => handleMarkerClick(location)}
                icon={nearestLocation && nearestLocation.id === location.id ? 
                  'http://maps.google.com/mapfiles/ms/icons/green-dot.png' : 
                  'http://maps.google.com/mapfiles/ms/icons/yellow-dot.png'
                }
              />
            ))}
            
            {/* Info window for selected location */}
            {selectedPlace && (
              <InfoWindow
                position={selectedPlace.position}
                onCloseClick={() => setSelectedPlace(null)}
              >
                <div>
                  <h3>{selectedPlace.name}</h3>
                  <p>{selectedPlace.description}</p>
                  {selectedPlace.distanceKm && <p>{selectedPlace.distanceKm} km away</p>}
                  <a 
                    href={getDirectionsUrl(selectedPlace.position)} 
                    target="_blank" 
                    rel="noopener noreferrer" 
                    className="direction-button"
                  >
                    Get Directions
                  </a>
                </div>
              </InfoWindow>
            )}
          </GoogleMap>
        ) : (
          <div className="map-loading">Loading map...</div>
        )}
      </LoadScript>
      
      <button 
        className="find-nearest-button" 
        onClick={findNearestLocation}
        disabled={!currentPosition || (ecoSwapLocations.length === 0 && realRecyclePoints.length === 0)}
      >
        Find Nearest Recycle Point
      </button>
    </div>
  );
};

export default MapComponent;
