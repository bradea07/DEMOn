package com.ecoswap.service;

import com.ecoswap.model.Product;
import com.ecoswap.model.SearchHistory;
import com.ecoswap.model.User;
import com.ecoswap.model.UserRecommendationHistory;
import com.ecoswap.repository.ProductRepository;
import com.ecoswap.repository.SearchHistoryRepository;
import com.ecoswap.repository.UserRepository;
import com.ecoswap.repository.UserRecommendationHistoryRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.stream.Collectors;
import java.util.regex.Pattern;

@Service
public class RecommendationService {
    @Autowired
    private SearchHistoryRepository searchHistoryRepository;
    
    @Autowired
    private ProductRepository productRepository;
    
    @Autowired
    private UserRepository userRepository;
    
    @Autowired
    private UserRecommendationHistoryRepository recommendationHistoryRepository;
    
    // Un factor pentru diversificarea recomandărilor
    private static final double DIVERSIFICATION_FACTOR = 0.3; // 30% șansa de a include produse noi/diverse
    
    // Numărul maxim de recomandări pentru același produs
    private static final int MAX_RECOMMENDATION_REPETITIONS = 3;
    
    /**
     * Records a user search to the search history
     */
    public void recordSearch(Long userId, String query, String category, String brand, 
                           String condition, String location, String minPrice, String maxPrice) {
        if (userId == null) {
            return; // Don't record if userId is null
        }
        
        Optional<User> userOpt = userRepository.findById(userId);
        if (!userOpt.isPresent()) {
            return; // Don't record if user doesn't exist
        }
        User user = userOpt.get();
        SearchHistory searchHistory = new SearchHistory();
        searchHistory.setUser(user);
        searchHistory.setQuery(query);
        searchHistory.setCategory(category);
        searchHistory.setBrand(brand);
        searchHistory.setCondition(condition); // Folosește setCondition, care este mapat la coloana "item_condition"
        searchHistory.setLocation(location);
        
        if (minPrice != null && !minPrice.isEmpty()) {
            try {
                searchHistory.setMinPrice(Double.parseDouble(minPrice));
            } catch (NumberFormatException e) {
                // Ignore invalid number
            }
        }
        
        if (maxPrice != null && !maxPrice.isEmpty()) {
            try {
                searchHistory.setMaxPrice(Double.parseDouble(maxPrice));
            } catch (NumberFormatException e) {
                // Ignore invalid number
            }
        }
        
        searchHistoryRepository.save(searchHistory);
    }
    
    /**
     * Generate product recommendations based on user search history
     */
    public List<Product> getRecommendationsForUser(Long userId) {
        if (userId == null) {
            return Collections.emptyList();
        }
        
        try {
            Optional<User> userOpt = userRepository.findById(userId);
            if (!userOpt.isPresent()) {
                return Collections.emptyList(); // Return empty list if user doesn't exist
            }
            
            User user = userOpt.get();
            
            // Get previously recommended products for this user from the database
            List<UserRecommendationHistory> previousRecommendations = 
                recommendationHistoryRepository.findByUserOrderByRecommendedAtDesc(user);
            
            // Create a set of product IDs that were recommended often (to avoid excessive repetition)
            Set<Long> frequentlyRecommendedProductIds = previousRecommendations.stream()
                .filter(rec -> rec.getRecommendationCount() >= MAX_RECOMMENDATION_REPETITIONS)
                .map(rec -> rec.getProduct().getId())
                .collect(Collectors.toSet());
            
            System.out.println("User " + userId + " has " + previousRecommendations.size() + 
                           " previous recommendations, with " + frequentlyRecommendedProductIds.size() + 
                           " shown frequently");
            
            // Get user's recent search history
            List<SearchHistory> searchHistories = searchHistoryRepository.findTop10ByUserOrderByTimestampDesc(user);
            if (searchHistories.isEmpty()) {
                // În loc să returnăm o listă goală, vom returna câteva produse aleatorii
                return getRandomRecommendations(userId, frequentlyRecommendedProductIds);
            }
            
            // Extract keywords, categories, and brands from search history
            Set<String> keywords = new HashSet<>();
            Map<String, Integer> categoryFrequency = new HashMap<>();
            Map<String, Integer> brandFrequency = new HashMap<>();          
            
            for (SearchHistory search : searchHistories) {
                // Extract keywords from queries - more sophisticated approach
                if (search.getQuery() != null && !search.getQuery().isEmpty()) {
                    // Split into words and filter out short words
                    Arrays.stream(search.getQuery().toLowerCase().split("\\s+"))
                          .filter(word -> word.length() > 2)  // Keep words with length > 2
                          .filter(word -> !isCommonStopWord(word))  // Filter out common stop words
                          .forEach(keywords::add);
                          
                    // Also add entire query as a keyword if it's short and meaningful
                    if (search.getQuery().length() < 30 && !isCommonStopWord(search.getQuery())) {
                        keywords.add(search.getQuery().toLowerCase());
                    }
                    
                    // Consider pairs of adjacent words as potential meaningful phrases
                    String[] words = search.getQuery().toLowerCase().split("\\s+");
                    for (int i = 0; i < words.length - 1; i++) {
                        String phrase = words[i] + " " + words[i+1];
                        if (phrase.length() > 5) {
                            keywords.add(phrase);
                        }
                    }
                }
                
                // Count categories with recency bias (more recent searches get higher weight)
                if (search.getCategory() != null && !search.getCategory().isEmpty()) {
                    int weight = categoryFrequency.getOrDefault(search.getCategory(), 0) + 1;
                    categoryFrequency.put(search.getCategory(), weight);
                }
                
                // Count brands with recency bias
                if (search.getBrand() != null && !search.getBrand().isEmpty()) {
                    int weight = brandFrequency.getOrDefault(search.getBrand(), 0) + 1;
                    brandFrequency.put(search.getBrand(), weight);
                }
                
                // Take location into account when available
                if (search.getLocation() != null && !search.getLocation().isEmpty()) {
                    keywords.add(search.getLocation().toLowerCase());
                }
                
                // Take condition into account when available 
                if (search.getCondition() != null && !search.getCondition().isEmpty()) {
                    keywords.add(search.getCondition().toLowerCase());
                }
            }
            
            // Obține toate categoriile din istoricul de căutare, sortate după frecvență
            List<Map.Entry<String, Integer>> sortedCategories = categoryFrequency.entrySet().stream()
                    .filter(e -> e.getKey() != null && !e.getKey().isEmpty())
                    .sorted(Map.Entry.<String, Integer>comparingByValue().reversed())
                    .collect(Collectors.toList());
            
            System.out.println("User " + userId + " categories: " + sortedCategories);
                    
            // Obține toate brandurile din istoricul de căutare, sortate după frecvență
            List<Map.Entry<String, Integer>> sortedBrands = brandFrequency.entrySet().stream()
                    .filter(e -> e.getKey() != null && !e.getKey().isEmpty())
                    .sorted(Map.Entry.<String, Integer>comparingByValue().reversed())
                    .collect(Collectors.toList());
                    
            System.out.println("User " + userId + " brands: " + sortedBrands);
                    
            // Creează lista de produse recomandate, inițial goală
            List<Product> recommendedProducts = new ArrayList<>();
            
            // Map pentru a ține evidența produselor deja adăugate (pentru a evita duplicatele)
            Set<Long> addedProductIds = new HashSet<>();
            
            // Recomandări bazate pe categorii - folosim toate categoriile, dar prioritizăm cele frecvente
            for (Map.Entry<String, Integer> categoryEntry : sortedCategories) {
                String category = categoryEntry.getKey();
                if (category != null && !category.isEmpty()) {
                    System.out.println("Finding products for category: " + category);
                    List<Product> categoryProducts = productRepository.findByCategoryOrderByIdDesc(category);
                    
                    // Filtrăm produsele care nu aparțin utilizatorului curent și care nu au fost deja adăugate
                    List<Product> filteredProducts = categoryProducts.stream()
                        .filter(product -> !product.getUser().getId().equals(userId))
                        .filter(product -> !addedProductIds.contains(product.getId()))
                        .limit(3) // Limităm la 3 produse per categorie
                        .collect(Collectors.toList());
                    
                    // Adăugăm produsele filtrate la lista de recomandări
                    filteredProducts.forEach(product -> {
                        recommendedProducts.add(product);
                        addedProductIds.add(product.getId());
                    });
                    
                    // Verificăm dacă am atins limita de recomandări
                    if (addedProductIds.size() >= 8) {
                        break;
                    }
                }
            }
            
            // Dacă încă nu am atins limita, adăugăm recomandări bazate pe branduri
            if (addedProductIds.size() < 8) {
                for (Map.Entry<String, Integer> brandEntry : sortedBrands) {
                    String brand = brandEntry.getKey();
                    if (brand != null && !brand.isEmpty()) {
                        System.out.println("Finding products for brand: " + brand);
                        List<Product> brandProducts = productRepository.findByBrandIgnoreCaseOrderByIdDesc(brand);
                        
                        // Filtrăm produsele care nu aparțin utilizatorului curent și care nu au fost deja adăugate
                        List<Product> filteredProducts = brandProducts.stream()
                            .filter(product -> !product.getUser().getId().equals(userId))
                            .filter(product -> !addedProductIds.contains(product.getId()))
                            .limit(2) // Limităm la 2 produse per brand
                            .collect(Collectors.toList());
                        
                        // Adăugăm produsele filtrate la lista de recomandări
                        filteredProducts.forEach(product -> {
                            recommendedProducts.add(product);
                            addedProductIds.add(product.getId());
                        });
                        
                        // Verificăm dacă am atins limita de recomandări
                        if (addedProductIds.size() >= 8) {
                            break;
                        }
                    }
                }
            }
            
            // Keyword-based recommendations - implementare îmbunătățită
            if (!keywords.isEmpty() && addedProductIds.size() < 8) {
                try {
                    System.out.println("Finding products based on keywords: " + keywords);
                    
                    // Sortăm cuvintele cheie după lungime descrescător pentru a prioriza cuvintele mai specifice
                    List<String> sortedKeywords = new ArrayList<>(keywords);
                    sortedKeywords.sort(Comparator.comparingInt(String::length).reversed());
                    
                    // Pentru fiecare cuvânt cheie, căutăm produse potrivite
                    for (String keyword : sortedKeywords) {
                        if (keyword.length() < 3) continue; // Ignorăm cuvintele prea scurte
                        
                        // Construim un pattern de căutare specific pentru acest cuvânt
                        Pattern pattern = Pattern.compile(keyword, Pattern.CASE_INSENSITIVE);
                        
                        // Căutăm în toate produsele
                        List<Product> allProducts = productRepository.findAll();
                        List<Product> keywordProducts = allProducts.stream()
                            .filter(product -> 
                                (product.getTitle() != null && pattern.matcher(product.getTitle()).find()) ||
                                (product.getDescription() != null && pattern.matcher(product.getDescription()).find()))
                            .filter(product -> !product.getUser().getId().equals(userId))
                            .filter(product -> !addedProductIds.contains(product.getId()))
                            .limit(5) // Limităm la 5 produse per cuvânt cheie
                            .collect(Collectors.toList());
                        
                        // Adăugăm produsele găsite la lista de recomandări
                        keywordProducts.forEach(product -> {
                            recommendedProducts.add(product);
                            addedProductIds.add(product.getId());
                            System.out.println("Added keyword-based recommendation: " + product.getTitle() + " (keyword: " + keyword + ")");
                        });
                        
                        // Verificăm dacă am atins limita de recomandări
                        if (addedProductIds.size() >= 8) {
                            break;
                        }
                    }
                } catch (Exception e) {
                    // Log the error but continue with other recommendations
                    System.err.println("Error generating keyword-based recommendations: " + e.getMessage());
                    e.printStackTrace();
                }
            }
            
            // Amestecăm recomandările pentru diversitate
            Collections.shuffle(recommendedProducts);
            
            // Filtrăm din nou duplicatele (deși ar trebui să avem puține sau niciuna cu implementarea noastră)
            List<Product> preliminaryRecommendations = recommendedProducts.stream()
                .distinct()
                .collect(Collectors.toList());
            
            // Filtrăm produsele recomandate prea des
            if (!frequentlyRecommendedProductIds.isEmpty()) {
                preliminaryRecommendations = preliminaryRecommendations.stream()
                    .filter(p -> !frequentlyRecommendedProductIds.contains(p.getId()))
                    .collect(Collectors.toList());
                
                System.out.println("Filtered out " + frequentlyRecommendedProductIds.size() + 
                               " frequently recommended products");
            }
            
            // Aplicăm un algoritm pentru a reduce repetiția produselor între utilizatori
            List<Product> diversifiedRecommendations = diversifyRecommendations(
                preliminaryRecommendations, 
                userId, 
                addedProductIds
            );
            
            // Limităm lista finală la 8 recomandări
            List<Product> finalRecommendations = diversifiedRecommendations.stream()
                .limit(8)
                .collect(Collectors.toList());
            
            // Dacă nu am găsit suficiente recomandări, completăm cu recomandări aleatorii
            if (finalRecommendations.isEmpty() || finalRecommendations.size() < 5) {
                System.out.println("Not enough specific recommendations found, adding random ones");
                
                // Obținem recomandări aleatorii, dar excludem produsele deja adăugate
                List<Product> randomRecommendations = getRandomRecommendations(userId, frequentlyRecommendedProductIds).stream()
                    .filter(p -> !addedProductIds.contains(p.getId()))
                    .limit(8 - finalRecommendations.size())
                    .collect(Collectors.toList());
                
                // Combinăm listele
                finalRecommendations.addAll(randomRecommendations);
                
                // Amestecăm din nou pentru a integra recomandările aleatorii
                Collections.shuffle(finalRecommendations);
            }
            
            // Actualizăm istoricul de recomandări pentru acest utilizator
            updateUserRecommendationHistory(userId, finalRecommendations);
            
            System.out.println("Returning " + finalRecommendations.size() + " personalized recommendations for user " + userId);
            return finalRecommendations;
        } catch (Exception e) {
            System.err.println("Error generating recommendations: " + e.getMessage());
            e.printStackTrace();
            
            // În caz de eroare, încercăm să returnăm recomandări aleatorii
            return getRandomRecommendations(userId);
        }
    }
    
    /**
     * Returnează recomandări aleatorii atunci când nu există istoric de căutare
     * sau când recomandările bazate pe istoric sunt insuficiente, personalizate pentru utilizator
     */
    private List<Product> getRandomRecommendations(Long userId, Set<Long> frequentlyRecommendedProductIds) {
        try {
            System.out.println("Generating diversified recommendations for user " + userId);
            
            Optional<User> userOpt = userRepository.findById(userId);
            if (!userOpt.isPresent()) {
                return Collections.emptyList();
            }
            User user = userOpt.get();
            
            // Obține toate produsele disponibile
            List<Product> allProducts = productRepository.findAll();
            
            // Extrage categoriile disponibile
            Set<String> availableCategories = allProducts.stream()
                .map(Product::getCategory)
                .filter(Objects::nonNull)
                .collect(Collectors.toSet());
            
            // Amestecă categoriile pentru diversitate
            List<String> diverseCategories = new ArrayList<>(availableCategories);
            Collections.shuffle(diverseCategories);
            
            List<Product> recommendedProducts = new ArrayList<>();
            
            // Preferă produsele nou adăugate (în ultima săptămână)
            Calendar cal = Calendar.getInstance();
            cal.add(Calendar.DAY_OF_MONTH, -7);
            Date oneWeekAgo = cal.getTime();
            
            List<Product> recentProducts = productRepository.findByCreatedAtAfterOrderByCreatedAtDesc(oneWeekAgo);
            if (!recentProducts.isEmpty()) {
                List<Product> filteredRecent = recentProducts.stream()
                    .filter(p -> !p.getUser().getId().equals(userId)) // Nu recomandăm produsele utilizatorului
                    .filter(p -> !frequentlyRecommendedProductIds.contains(p.getId())) // Evităm produse recomandate frecvent
                    .limit(3) // Limităm la 3 produse recente
                    .collect(Collectors.toList());
                
                recommendedProducts.addAll(filteredRecent);
            }
            
            // Pentru fiecare categorie, adăugăm cel puțin un produs (dacă există)
            for (String category : diverseCategories) {
                // Obține produsele din această categorie, exclude produsele utilizatorului și cele recomandate frecvent
                List<Product> categoryProducts = allProducts.stream()
                    .filter(p -> category.equals(p.getCategory()))
                    .filter(p -> !p.getUser().getId().equals(userId))
                    .filter(p -> !frequentlyRecommendedProductIds.contains(p.getId()))
                    .filter(p -> !recommendedProducts.contains(p)) // Exclude produse deja adăugate
                    .collect(Collectors.toList());
                
                // Amestecă și ia cel mult 2 produse din fiecare categorie
                Collections.shuffle(categoryProducts);
                recommendedProducts.addAll(categoryProducts.stream()
                    .limit(2)
                    .collect(Collectors.toList()));
                
                // Limită de 8 produse în total
                if (recommendedProducts.size() >= 8) {
                    break;
                }
            }
            
            // Dacă încă nu avem destule, adaugă produse aleatorii până la 8
            if (recommendedProducts.size() < 8) {
                List<Product> remainingProducts = allProducts.stream()
                    .filter(p -> !p.getUser().getId().equals(userId))
                    .filter(p -> !frequentlyRecommendedProductIds.contains(p.getId()))
                    .filter(p -> !recommendedProducts.contains(p))
                    .collect(Collectors.toList());
                
                Collections.shuffle(remainingProducts);
                recommendedProducts.addAll(remainingProducts.stream()
                    .limit(8 - recommendedProducts.size())
                    .collect(Collectors.toList()));
            }
            
            // Actualizează istoricul de recomandări
            updateUserRecommendationHistory(user, recommendedProducts);
            
            System.out.println("Generated " + recommendedProducts.size() + " random recommendations");
            return recommendedProducts;
        } catch (Exception e) {
            System.err.println("Error generating random recommendations: " + e.getMessage());
            e.printStackTrace();
            return Collections.emptyList();
        }
    }
    
    // Overload pentru compatibilitate
    private List<Product> getRandomRecommendations(Long userId) {
        Optional<User> userOpt = userRepository.findById(userId);
        if (!userOpt.isPresent()) {
            return Collections.emptyList();
        }
        User user = userOpt.get();
        
        // Obține produsele recomandate frecvent
        List<UserRecommendationHistory> previousRecommendations = 
            recommendationHistoryRepository.findByUserOrderByRecommendedAtDesc(user);
        
        Set<Long> frequentlyRecommendedProductIds = previousRecommendations.stream()
            .filter(rec -> rec.getRecommendationCount() >= MAX_RECOMMENDATION_REPETITIONS)
            .map(rec -> rec.getProduct().getId())
            .collect(Collectors.toSet());
        
        return getRandomRecommendations(userId, frequentlyRecommendedProductIds);
    }
    
    /**
     * Verifică dacă un cuvânt este un "stop word" comun care nu adaugă valoare semantică
     */
    private boolean isCommonStopWord(String word) {
        // Lista de stop words în română și engleză
        Set<String> stopWords = new HashSet<>(Arrays.asList(
            "si", "in", "la", "cu", "de", "pe", "pentru", "din", "este", "sunt",
            "and", "the", "in", "of", "to", "a", "is", "that", "it", "with", "as", "for",
            "was", "on", "are", "by", "this", "an", "at", "be", "or", "but", "not", "you",
            "from", "have", "all", "new", "more", "use", "had", "can", "has"
        ));
        
        return stopWords.contains(word.toLowerCase());
    }
    
    /**
     * Diversifică recomandările pentru a evita arătarea acelorași produse tuturor utilizatorilor
     * 
     * @param candidateProducts Lista preliminară de recomandări
     * @param userId ID-ul utilizatorului pentru care se generează recomandările
     * @param alreadyAddedIds Set cu ID-urile produselor deja adăugate în recomandări
     * @return Lista diversificată de recomandări
     */
    private List<Product> diversifyRecommendations(
            List<Product> candidateProducts, 
            Long userId, 
            Set<Long> alreadyAddedIds) {
        
        Optional<User> userOpt = userRepository.findById(userId);
        if (!userOpt.isPresent()) {
            return candidateProducts;
        }
        User user = userOpt.get();
        
        // Obținem produsele recomandate anterior acestui utilizator din baza de date
        List<UserRecommendationHistory> previousRecommendations = 
            recommendationHistoryRepository.findByUserOrderByRecommendedAtDesc(user);
        
        // Extragem ID-urile produselor recomandate frecvent
        Set<Long> frequentlyRecommendedProductIds = previousRecommendations.stream()
            .filter(rec -> rec.getRecommendationCount() >= MAX_RECOMMENDATION_REPETITIONS)
            .map(rec -> rec.getProduct().getId())
            .collect(Collectors.toSet());
        
        // Lista rezultat
        List<Product> diversifiedList = new ArrayList<>();
        
        // Strategie 1: Prioritizăm produsele care nu au fost recomandate anterior acestui utilizator
        for (Product product : candidateProducts) {
            // Verificăm dacă produsul a fost recomandat anterior
            Optional<UserRecommendationHistory> historyOpt = previousRecommendations.stream()
                .filter(rec -> rec.getProduct().getId().equals(product.getId()))
                .findFirst();
            
            // Dacă produsul nu a fost recomandat anterior sau nu a fost recomandat frecvent
            if ((!historyOpt.isPresent() || historyOpt.get().getRecommendationCount() < MAX_RECOMMENDATION_REPETITIONS) 
                && !alreadyAddedIds.contains(product.getId())) {
                diversifiedList.add(product);
                alreadyAddedIds.add(product.getId());
            }
        }
        
        // Strategie 2: Dacă avem încă nevoie de mai multe produse, putem adăuga și din cele recomandate frecvent
        if (diversifiedList.size() < 8) {
            for (Product product : candidateProducts) {
                // Dacă produsul nu este încă în lista nouă
                if (!alreadyAddedIds.contains(product.getId())) {
                    diversifiedList.add(product);
                    alreadyAddedIds.add(product.getId());
                    
                    // Dacă am atins limita de 8 produse, ne oprim
                    if (diversifiedList.size() >= 8) {
                        break;
                    }
                }
            }
        }
        
        // Strategie 3: Introducem o șansă de a afișa produse foarte noi (create recent)
        if (Math.random() < DIVERSIFICATION_FACTOR) {
            // Calculăm data de acum 7 zile
            Calendar cal = Calendar.getInstance();
            cal.add(Calendar.DAY_OF_MONTH, -7);
            Date oneWeekAgo = cal.getTime();
            
            // Obținem produse noi adăugate în ultima săptămână
            List<Product> newestProducts = productRepository.findByCreatedAtAfterOrderByCreatedAtDesc(oneWeekAgo)
                .stream()
                .filter(p -> !p.getUser().getId().equals(userId)) // Excludem produsele utilizatorului curent 
                .filter(p -> !alreadyAddedIds.contains(p.getId())) // Excludem produse deja adăugate
                .filter(p -> !frequentlyRecommendedProductIds.contains(p.getId())) // Excludem cele recomandate frecvent
                .limit(2) // Limităm la 2 produse noi
                .collect(Collectors.toList());
            
            // Dacă nu avem produse noi adăugate în ultima săptămână, folosim ID-ul ca indicator de noutate
            if (newestProducts.isEmpty()) {
                newestProducts = productRepository.findAll().stream()
                    .filter(p -> !p.getUser().getId().equals(userId)) // Excludem produsele utilizatorului curent 
                    .filter(p -> !alreadyAddedIds.contains(p.getId())) // Excludem produse deja adăugate
                    .filter(p -> !frequentlyRecommendedProductIds.contains(p.getId())) // Excludem cele recomandate frecvent
                    .sorted(Comparator.comparing(Product::getId).reversed()) // Sortăm descrescător după ID
                    .limit(2) // Limităm la 2 produse noi
                    .collect(Collectors.toList());
            }
            
            // Adaugăm produsele noi la începutul listei
            if (!newestProducts.isEmpty()) {
                System.out.println("Adding " + newestProducts.size() + " newest products to diversify");
                // Actualizăm setul de produse adăugate
                newestProducts.forEach(p -> alreadyAddedIds.add(p.getId()));
                // Adăugăm la lista diversificată
                diversifiedList.addAll(0, newestProducts);
            }
        }
        
        // Limităm la 8 produse și le amestecăm pentru diversitate
        List<Product> result = diversifiedList.stream().limit(8).collect(Collectors.toList());
        Collections.shuffle(result);
        
        return result;
    }
    
    /**
     * Actualizează istoricul de recomandări pentru un utilizator
     */
    private void updateUserRecommendationHistory(User user, List<Product> recommendations) {
        if (user == null || recommendations == null || recommendations.isEmpty()) {
            return;
        }
        
        Date now = new Date();
        
        for (Product product : recommendations) {
            // Caută dacă există deja o înregistrare pentru acest utilizator și produs
            Optional<UserRecommendationHistory> existingRecord = 
                recommendationHistoryRepository.findByUserAndProduct(user, product);
            
            if (existingRecord.isPresent()) {
                // Actualizează contorul și data pentru înregistrarea existentă
                UserRecommendationHistory history = existingRecord.get();
                history.incrementCount();
                history.setRecommendedAt(now);
                recommendationHistoryRepository.save(history);
            } else {
                // Creează o nouă înregistrare
                UserRecommendationHistory newHistory = new UserRecommendationHistory(user, product);
                recommendationHistoryRepository.save(newHistory);
            }
        }
        
        System.out.println("Updated recommendation history for user " + user.getId() + 
                       " with " + recommendations.size() + " products");
    }
    
    /**
     * Actualizează istoricul de recomandări pentru un utilizator (varianta cu ID)
     */
    private void updateUserRecommendationHistory(Long userId, List<Product> recommendations) {
        Optional<User> userOpt = userRepository.findById(userId);
        if (!userOpt.isPresent()) {
            return;
        }
        
        updateUserRecommendationHistory(userOpt.get(), recommendations);
    }
}
